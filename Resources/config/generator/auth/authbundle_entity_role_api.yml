# php vendor/bin/sfynx-ddd-generator \
# --namespace=Sfynx\\AuthBundle \
# --conf-file=/var/www/app/config/generator/auth/authbundle_entity_role_form.yml \
# --report-template=default \
# --report-dir=/var/www/src/generator/authbundle
default:
    namespace: Sfynx\AuthBundle
    cqrs: Role\Query
    template: default
    indentation: 4
    widgets:
        presentation:
            widget_coordination:
                class: GetCoordination
                arguments:
                    - '$workflowHandler'
                extends: Sfynx\CoreBundle\Layers\Presentation\Coordination\Generalisation\AbstractApiController
                options:
                    implements: ~
                    uses: ~
                    traits: ~
                body:
                    - codeComment1:
                        design: 'code'
                        content: "// 1. Transform options to Command."
                    - updateQuery:
                        design: 'adapter'
                        class: Sfynx\CoreBundle\Layers\Presentation\Adapter\Query\QueryAdapter
                        arguments:
                            - 'new GetRoleQuery'
                        calls:
                            - [ createQueryFromRequest, [ 'new QueryRequest' ] ]
                    - codeComment2:
                        design: 'code'
                        content: "// 2. Implement the command workflow"
                    - queryWorkflow:
                        design: 'observer'
                        class: Sfynx\CoreBundle\Layers\Application\Query\Workflow\QueryWorkflow
                        calls:
                            - [ attach, [ 'new OBApiHandler' ] ]
                    - codeComment3:
                        design: 'code'
                        content: "// 3. Implement decorator to apply the command workflow from the command"
                    - queryHandlerResult:
                        design: 'decorator'
                        class: Sfynx\CoreBundle\Layers\Application\Query\Handler\ApiQueryHandler
                        arguments:
                            - '$queryworkflow'
                        handlers: [ 'GetQueryValidationHandler', 'GetQuerySpecHandler']
                        calls:
                            - [ process, [ '$updateQuery' ] ]
                    - workflowHandler:
                        design: 'observer'
                        class: Sfynx\CoreBundle\Layers\Application\Common\Handler\WorkflowHandler
                        calls:
                            - [ attach, [ 'new OBApiBodyJson' ] ]
                            - [ attach, [ 'new OBApiResponseJson' ] ]
                    - responseHandlerResult:
                        design: 'handler'
                        class: Sfynx\CoreBundle\Layers\Application\Response\Handler\ResponseHandler
                        arguments:
                            - '$Workflowhandler'
                        calls:
                            - [ process, [ '$queryHandlerResult' ] ]
                    - codeln2:
                        design: 'code'
                        content: "return $responseHandlerResult->getResponse();"
            widget_request:
                class: QueryRequest
                arguments:
                  - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                options:
                    methods: ['GET']
        application:
            widget_cqrs_query:
                class: GetRoleQuery
                arguments: ~
            widget_cqrs_query_validator_specification:
                class: Validation\SpecHandler\GetQuerySpecHandler
                arguments:
                  - '$queryHandlerResult'
            widget_cqrs_query_validator_validation:
                class: Validation\ValidationHandler\GetQueryValidationHandler
                arguments:
                  - '$queryHandlerResult'
                  - 'new SymfonyValidatorStrategy'
                  - 'false'
            widget_service_app_class:
                - SymfonyValidatorStrategy:
                    create: false
                    class: 'Sfynx\CoreBundle\Layers\Application\Validation\Validator\SymfonyValidatorStrategy'
                    arguments: ['Symfony\Component\Validator\Validator\ValidatorInterface']
        domain:
            #
            # ENTITY CLASSES
            #
            widget_entity_class:
                - RoleEntity:
                    create: true
                    class: Domain\Entity\Role
                    options:
                        mapping: 'Role'
                        traits:
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitBuild'
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitEnabled'
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitName'
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitDatetime'
                          - 'Sfynx\CoreBundle\Layers\Domain\Model\Traits\TraitHeritage'
                          - 'Sfynx\AuthBundle\Domain\Generalisation\TraitAccessControl'
                        models:
#                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\Entity', parameters: { performMethod: ['Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct']} }
                          0:
                            class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\Entity'
                            parameters:
                              performMethods:
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Construct'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\CreateFromNative'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToString'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\ToArray'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Serialize'
                                - 'Sfynx\CoreBundle\Generator\Domain\Component\File\MethodModel\Unserialize'
            #
            # MANAGER CLASSES
            #
            widget_service_manager_class:
                - RoleEntityManager:
                    create: true
                    class: Entity\Role\Manager\RoleManager
                    arguments: ~
                    options:
                        entity: 'Role'
            #
            # SERVICES CLASSES
            #
            widget_service_class:
                #
                # ROLE REPOSITORY INTERFACES
                #
                - RoleCommandRepositoryInterface:
                    create: true
                    class: Domain\Repository\Command\RoleCommandRepositoryInterface
                    type: interface
                - RoleQueryRepositoryInterface:
                    create: true
                    class: Domain\Repository\Query\RoleQueryRepositoryInterface
                    type: interface
            #
            # OBSERVER CLASSES
            #
            widget_workflow_observer_class:
                #
                # LOGICAL RESPONSE HANDLER
                #
                - OBApiHandler:
                    create: true
                    class: Domain\Workflow\Observer\Role\Response\Api\OBApiHandler
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Manager\Generalisation\Interfaces\ManagerInterface'
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                    extends: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Generalisation\Response\Api\AbstractApiHandler
                    options:
                        implements: ~
                        uses: ['Sfynx\CoreBundle\Layers\Infrastructure\Exception\WorkflowException', 'Exception']
                        traits: ~
                        methods:
                          - name: 'process'
                            comments: ['{@inheritdoc}']
                            visibility: 'protected'
                            returnType: 'bool'
                            body:
                              - 'try {'
                              - "    $this->wfLastData->result = $this->manager->getQueryRepository('FindGetQueryTransformer', []);"
                              - '} catch (Exception $e) {'
                              - '    throw WorkflowException::noCreatedViewForm();'
                              - '}'
                              - 'return true;'
                - OBApiBodyJson:
                    create: true
                    class: Domain\Workflow\Observer\Role\Response\Api\OBApiBodyJson
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                    extends: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Generalisation\Response\Api\AbstractApiBodyJson
                    options:
                        implements: ~
                        uses: ['Sfynx\CoreBundle\Layers\Infrastructure\Exception\WorkflowException', 'Exception']
                        traits: ~
                        methods:
                          - name: 'process'
                            comments: ['{@inheritdoc}']
                            visibility: 'protected'
                            returnType: 'bool'
                            body:
                              - 'try {'
                              - "    $this->wfLastData->body = jsonApi::transform($this->wfHandler->result);"
                              - '} catch (Exception $e) {'
                              - '    throw WorkflowException::noCreatedViewForm();'
                              - '}'
                              - 'return true;'
                - OBApiResponseJson:
                    create: true
                    class: Domain\Workflow\Observer\Role\Response\Api\OBApiResponseJson
                    arguments:
                      - 'Sfynx\CoreBundle\Layers\Domain\Service\Request\Generalisation\RequestInterface'
                    extends: Sfynx\CoreBundle\Layers\Domain\Workflow\Observer\Generalisation\Response\Api\AbstractApiResponseJson
                    options:
                        implements: ~
                        uses:
                          - 'Exception'
                          - 'Sfynx\CoreBundle\Layers\Domain\Service\Response\Serializer\SerializerStrategy'
                          - 'Sfynx\CoreBundle\Layers\Domain\Service\Response\Handler\ResponseHandler'
                          - 'Sfynx\CoreBundle\Layers\Infrastructure\Exception\ResponseException'
                        traits: ~
                        methods:
                          - name: 'process'
                            comments: ['{@inheritdoc}']
                            visibility: 'protected'
                            returnType: 'bool'
                            body:
                              - 'try {'
                              - "    $this->wfLastData->response = (new ResponseHandler(SerializerStrategy::create(), $this->request->setRequestFormat('json')))"
                              - "         ->create($this->wfLastData->body, Response::HTTP_OK, $this->headers)"
                              - "         ->getResponse();"
                              - '} catch (Exception $e) {'
                              - '    throw ResponseException::noCreatedResponse();'
                              - '}'
                              - 'return true;'
        infrastructure:
            widget_security_parse: true
            widget_infra_class:
                #
                # ROLE REPOSITORIES
                #
                - CommandRoleRepository:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Command\Orm\RoleRepository
                    arguments: ~
                    comments:
                      - 'This class was generated by the Doctrine ORM. Add your own custom'
                      - 'repository methods below.'
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\AbstractCommandRepository
                    options:
                        implements: ['Domain\Repository\Command\RoleCommandRepositoryInterface']
                        uses: ~
                        traits: ~
                - QueryRoleRepository:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\RoleRepository
                    arguments: ~
                    comments:
                      - 'This class was generated by the Doctrine ORM. Add your own custom'
                      - 'repository methods below.'
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\Adapter\Generalisation\Orm\AbstractQueryRepository
                    options:
                        implements: ['Domain\Repository\Query\RoleQueryRepositoryInterface']
                        uses: ~
                        traits: ~
                #
                # RESSOURCE TRANSFORMER/QUERY BUILDER
                #
                - FindGetQueryBuilder:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Role\QueryBuilder\FindGetQueryBuilder
                    arguments: ~
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['Doctrine\ORM\QueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryBuilder', parameters: ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []'] }
                - FindGetQueryTransformer:
                    create: true
                    class: Infrastructure\Persistence\Adapter\Query\Orm\Role\QueryTransformer\FindGetQueryTransformer
                    arguments: ~
                    extends: Sfynx\CoreBundle\Layers\Infrastructure\Persistence\QueryBuilder\Generalisation\Orm\AbstractQueryBuilder
                    options:
                        uses: ['Sfynx\AuthBundle\Infrastructure\Persistence\Adapter\Query\Orm\Role\QueryBuilder\FindGetQueryBuilder']
                        models:
                          - { class: 'Sfynx\CoreBundle\Generator\Domain\Component\File\HandlerModel\Observer\QueryTransformer', parameters: ['FindGetQueryBuilder', ['bool $var1 = false', 'bool $var2 = true', 'int $var3 = 0', 'array $var4 = []']]}

    mapping:
        x-providers: [orm, couchdb]
        x-entities:
          Role:
            x-fields:
              id:
                name: entityId
                type: valueObject
                voName: IdVO
                primaryKey: true
                mapping:
                  targetEntity: 'Sfynx\AuthBundle\Domain\Entity\Role'
#                  formData:
#                      manager: 'Sfynx\AuthBundle\Domain\Service\Role\Manager\EntityManager as RoleManager'
              layout:
                type: valueObject
                voName: IdVO
                foreignKey: true
                required: true
                choice_label: Layout
                mapping:
                  relationship: ManyToOne
                  targetEntity: 'Sfynx\AuthBundle\Domain\Entity\Layout'
                  setter: true
                  formData:
                      manager: 'Sfynx\AuthBundle\Domain\Service\Layout\Manager\EntityManager as LayoutManager'
                      queryFunction: { class: 'FindLayoutQueryTransformer', args: ['true', 'false', 1299, {tata: 'tataValue', tutu: 'tutuValue'}] }
              accessControl:
                type: valueObject
                voName: IdVO
                foreignKey: true
                required: true
                choice_label: Ressource
                mapping:
                  relationship: ManyToOne
                  targetEntity: 'Sfynx\AuthBundle\Domain\Entity\Ressource'
                  formData:
                      manager: 'Sfynx\AuthBundle\Domain\Service\Ressource\Manager\EntityManager as RessourceManager'
                      queryFunction: { class: 'FindRessourceQueryTransformer', args: ['true', 'false', 1299, {tata: 'tataValue', tutu: 'tutuValue'}] }
              role:
                type: valueObject
                voName: RoleVO
        x-valueObjects:
          IdVO:
            type: 'Sfynx\CoreBundle\Layers\Domain\ValueObject\IdVO'
            create: false
            x-fields:
              id:
                type: id
          RoleVO:
            type: 'Domain\ValueObject\RoleVO'
            create: true
            x-fields:
              name:
                type: string
                required: true
              label:
                type: string
                required: true
              enabled:
                type: boolean
                defaultValue: true
#                required: false
              comment:
                type: textarea
                required: false
              heritage:
                type: array
                form:
                  type: array
                  serviceType: sfynx_security_roles
                required: true
                multiple: true
                expanded: false
              routeLogin:
                type: string
                form:
                  type: array
                  serviceType: sfynx_routes
                required: false
                multiple: false
                expanded: false
              routeLogout:
                type: string
                form:
                  type: array
                  serviceType: sfynx_routes
                required: false
                multiple: false
                expanded: false
