
    /**
     * Deletes a {{ entity }} entity.
     *
     * @param integer $id Id value
     *
     * @PreAuthorize("hasRole('ROLE_EDITOR') or (hasRole('ROLE_ADMIN') and hasRole('ROLE_SUPER_ADMIN'))")
     * @return RedirectResponse
     * @access public
     */
    public function deleteAction($id)
    {
        $em       = $this->getDoctrine()->getManager();
        $request  = $this->getRequest();
        $locale   = $request->getLocale();
        // we get params
        $NoLayout = $this->container->get('request_stack')->getCurrentRequest()->query->get('NoLayout');
        //
        $form     = $this->createDeleteForm($id);
        $form->bind($request);
        if ($form->isValid()) {
            $entity = $em->getRepository("{{ bundle }}:{{ entity }}")
                ->findOneByEntity($locale, $id, 'object');
            if (!$entity) {
                throw ControllerException::NotFoundEntity('{{ entity }}');
            }
            try {
                $em->remove($entity);
                $em->flush();
                // to delete cache list query
                $this->deleteAllCacheQuery('hash_{{ route_name_prefix }}');
            } catch (\Exception $e) {
                $request->getSession()
                    ->getFlashBag()
                    ->clear();
                $request->getSession()
                    ->getFlashBag()
                    ->add('notice', 'pi.session.flash.wrong.undelete');
            }
        }

        return $this->redirect($this->generateUrl('{{ route_name_prefix }}', array('NoLayout' => $NoLayout)));
    }

    protected function createDeleteForm($id)
    {
        return $this->createFormBuilder(array('id' => $id))
            ->add('id', 'hidden')
            ->getForm()
        ;
    }
